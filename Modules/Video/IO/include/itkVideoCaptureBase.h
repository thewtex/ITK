/*=========================================================================
 *
 *  Copyright Insight Software Consortium
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0.txt
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *=========================================================================*/
#ifndef __itkVideoCaptureBase_h
#define __itkVideoCaptureBase_h

// Define support for Video Capture
#ifndef ITK_VIDEO_USE_CAPTURE
#define ITK_VIDEO_USE_CAPTURE
#endif

#ifdef _MSC_VER
#pragma warning ( disable : 4786 )
#endif

#include "itkVideoIOBase.h"

namespace itk
{
/** \class VideoCaptureBase
 *
 * \brief VideoIO base class for reading videos from real-time capture devices,
 * such as cameras.  All such devices use a camera:// URL identifier.
 *
 * Video capture devices can often be used in place of files, but they have
 * substantially different capablities.  Most importantly, most camera devices
 * do not support seeking backward in any form.  Secondly, many cameras require
 * run-time configuration to be useful.  Capture devices are configured using
 * standard URL parameter=value syntax, which looks like:
 * camera://[interface name]/[camera identifer]?parm_1=val_1&...&parm_n=val_n
 *
 * This base class defines several standard parameters, all of which are
 * optional, but their use is strongly encouraged because default values may
 * change in the future.  Parameters are processed in ReadImageInformation().
 * They include:
 *     fps, maxframes,
 *     xstart, ystart, zstart,
 *     width, height, depth,
 *     xspacing, yspacing, zspacing
 * Default values for the above parameters are set in two places, either
 * VideoIOBase::ResetMembers() or VideoCaptureBase::ReadImageInformation().
 *
 * Important Note:  Including any third-dimension
 * parameters, such as zspacing, will automatically increase the grabbing
 * dimensions to at least 3, although it is possible for child classes to
 * override this behavior.
 *
 * As a convenience, the parent class VideoIOBase provides methods to determine
 * whether or not a filename is really a camera:// URL.  Child classes, however,
 * must provide the method virtual bool CanReadFile(const char *) to identify
 * which camera interfaces they can handle.
 *
 * \ingroup ITKVideoIO
 *
 */
class ITK_EXPORT VideoCaptureBase : public VideoIOBase
{
public:
  /** Standard class typedefs. */
  typedef VideoCaptureBase     Self;
  typedef VideoIOBase          Superclass;
  typedef SmartPointer< Self > Pointer;

  typedef std::pair< std::string, std::string > ParameterValuePairType;
  typedef std::map< std::string, std::string >  ParameterMapType;

  /** Run-time type information (and related methods). */
  itkTypeMacro(VideoCaptureBase, Superclass);

  /** Override SetFileName to do parsing of a camera:// URL */
  virtual void SetFileName(const std::string& cameraURL);
  virtual void SetFileName(const char* cameraURL);

  /** Set the spacing, dimension, etc. information from the (protected)
   * parameter map generated by SetFileName().
   *
   * This base-class implementation processes all the standard parameters.
   * Child classes should overload to provide additional processing of their
   * own additional parameters, and when overloading they should first call
   * this base-class implementaiton. */
  virtual void ReadImageInformation();

  /** Video Caputure devices do not support writting. */
  virtual bool CanWriteFile(const char *)
  {
    return false;
  }
  virtual void WriteImageInformation()
  {
    itkExceptionMacro("Camera Video-Capture Devices do not support writting.");
  }
  virtual void Write(const void * itkNotUsed(buffer) )
  {
    itkExceptionMacro("Camera Video-Capture Devices do not support writting.");
  }


  /** Convenience functions to extract specific parts of a camera:// URL */
  std::string GetCameraInterfaceFromURL( const std::string& cameraURL);


protected:
  VideoCaptureBase()
  {}
  ~VideoCaptureBase()
  {}

  void PrintSelf(std::ostream & os, Indent indent) const;

  /** Reset member variables to empty state closed */
  void ResetMembers();

  // If necessary, increase the number of dimensions to be at least d.
  // The never reduces the number of dimensions.
  // WARNING:  Does NOT reallocate an image buffer, so use only inside the
  // likes of ReadImageInformation().
  virtual void EnsureDimensionCount(unsigned int d);

  /** The pixel index (offset) at which to start grabbing, useful for
   * establishing a region-of-interest from a camera, which for some hardware
   * allows for faster readout of smaller images.
   * This is used in combination with m_Dimensions, which sets the size of the
   * grabbed portion of the camera's image.
   * Defaults to all zero, as set by ResetMembers(). */
  std::vector< SizeValueType > m_GrabberStartIndex;

  /** The current camera interface, typically passed in via a camera:// URL */
  std::string m_CameraInterfaceName;

  /** The current camera identifier, typically passed in via a camera:// URL */
  std::string m_CameraIdentifierName;

  /** List (map) of parameter values, typically passed in via a camera:// URL */
  ParameterMapType m_ParameterValues;

private:
  VideoCaptureBase(const Self &); //purposely not implemented
  void operator=(const Self &);  //purposely not implemented

};
} // end namespace itk

#endif // __itkVideoCaptureBase_h
