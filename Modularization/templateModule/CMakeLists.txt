cmake_minimum_required(VERSION 2.8 FATAL_ERROR)
project(ITK)

include(CTest)

# Setup build locations.
if(NOT CMAKE_RUNTIME_OUTPUT_DIRECTORY)
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${ITK_BINARY_DIR}/bin)
endif()
if(NOT CMAKE_LIBRARY_OUTPUT_DIRECTORY)
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${ITK_BINARY_DIR}/lib)
endif()
if(NOT CMAKE_ARCHIVE_OUTPUT_DIRECTORY)
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${ITK_BINARY_DIR}/lib)
endif()

if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  set(CMAKE_INSTALL_PREFIX ${ITK_BINARY_DIR}/root CACHE PATH "" FORCE)
  set(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT 0)
endif()

add_subdirectory(itk-base)

set(itk-base_DIR ${ITK_SOURCE_DIR}/itk-base)
find_package(itk-base 4.0 EXACT REQUIRED)

#-----------------------------------------------------------------------------

# Load the module DAG.
set(ITK_MODULES_ALL)
foreach(root ${ITK_SOURCE_DIR})
  file(GLOB meta "${root}/*/itk-module.cmake")
  foreach(f ${meta})
    include(${f})
    list(APPEND ITK_MODULES_ALL ${itk-module})
    get_filename_component(${itk-module}_SOURCE_DIR ${f} PATH)
  endforeach()
endforeach()

# Provide an option for every module.
foreach(itk-module ${ITK_MODULES_ALL})
  option(ITK_BUILD_${itk-module} "Request building ${itk-module}"
    "${ITK_MODULE_${itk-module}_DEFAULT}")
endforeach()

# Follow dependencies.
macro(itk_module_enable itk-module _needed_by)
  if(NOT ITK_BUILD_${itk-module})
    list(APPEND ITK_MODULE_${itk-module}_NEEDED_BY ${_needed_by})
  endif()
  if(NOT ${itk-module}_ENABLED)
    set(${itk-module}_ENABLED 1)
    foreach(dep IN LISTS ITK_MODULE_${itk-module}_DEPENDS)
      itk_module_enable(${dep} ${itk-module})
    endforeach()
  endif()
endmacro()
foreach(itk-module ${ITK_MODULES_ALL})
  if(ITK_BUILD_${itk-module})
    itk_module_enable("${itk-module}" "")
  endif()
endforeach()

# Build final list of enabled modules.
set(ITK_MODULES_ENABLED "")
foreach(itk-module ${ITK_MODULES_ALL})
  if(${itk-module}_ENABLED)
    list(APPEND ITK_MODULES_ENABLED ${itk-module})
  endif()
endforeach()
list(SORT ITK_MODULES_ENABLED) # Deterministic order.

# Order list to satisfy dependencies.
include(CMake/TopologicalSort.cmake)
topological_sort(ITK_MODULES_ENABLED ITK_MODULE_ _DEPENDS)

# Report what will be built.
foreach(itk-module ${ITK_MODULES_ENABLED})
  if(ITK_BUILD_${itk-module})
    set(_reason ", requested")
  else()
    set(_reason ", needed by [${ITK_MODULE_${itk-module}_NEEDED_BY}]")
  endif()
  message(STATUS "Enabled ${itk-module}${_reason}.")
endforeach()

#-----------------------------------------------------------------------------

if(NOT ITK_MODULES_ENABLED)
  message(WARNING "No modules enabled!")
  file(REMOVE "${ITK_BINARY_DIR}/itk-targets.cmake")
  return()
endif()

file(WRITE "${ITK_BINARY_DIR}/itk-targets.cmake"
  "# Generated by CMake, do not edit!")

# Build all modules.
foreach(itk-module ${ITK_MODULES_ENABLED})
  set(${itk-module}-targets itk-targets)
  set(${itk-module}-targets-install "lib/cmake/itk-4.0/itk-targets.cmake")
  set(${itk-module}-targets-build "${ITK_BINARY_DIR}/itk-targets.cmake")
  set(${itk-module}_DIR ${ITK_BINARY_DIR}/${itk-module}) # find_package
  add_subdirectory(${${itk-module}_SOURCE_DIR} ${${itk-module}_DIR})
endforeach()

install(EXPORT itk-targets DESTINATION lib/cmake/itk-4.0)
