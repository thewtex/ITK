if(itk-base-config-INCLUDED)
  return()
endif()
set(itk-base-config-INCLUDED 1)

set(ITK_VERSION 4.0)
get_filename_component(_itk_base_dir "${CMAKE_CURRENT_LIST_FILE}" PATH)

macro(itk_module _name)
  set(itk-module ${_name})
  set(itk-module-test ${_name}-Test)
  set(_doing "")
  set(ITK_MODULE_${itk-module}_DEPENDS "")
  set(ITK_MODULE_${itk-module-test}_DEPENDS "${itk-module}")
  set(ITK_MODULE_${itk-module}_DEFAULT OFF)
  foreach(arg ${ARGN})
    if("${arg}" MATCHES "^(DEPENDS|TEST_DEPENDS|DEFAULT)$")
      set(_doing "${arg}")
    elseif("${arg}" MATCHES "^[A-Z][A-Z][A-Z]$")
      set(_doing "")
      message(AUTHOR_WARNING "Unknown argument [${arg}]")
    elseif("${_doing}" MATCHES "^DEPENDS$")
      list(APPEND ITK_MODULE_${itk-module}_DEPENDS "${arg}")
    elseif("${_doing}" MATCHES "^TEST_DEPENDS$")
      list(APPEND ITK_MODULE_${itk-module-test}_DEPENDS "${arg}")
    elseif("${_doing}" MATCHES "^DEFAULT")
      set(ITK_MODULE_${itk-module}_DEFAULT "${arg}")
    else()
      set(_doing "")
      message(AUTHOR_WARNING "Unknown argument [${arg}]")
    endif()
  endforeach()
  list(SORT ITK_MODULE_${itk-module}_DEPENDS) # Deterministic order.
  list(SORT ITK_MODULE_${itk-module-test}_DEPENDS) # Deterministic order.
endmacro()

macro(itk_module_impl)
  include(itk-module.cmake) # Load module meta-data
  set(itk-version ${ITK_VERSION})
  if(NOT ${itk-module}-target)
    set(${itk-module}-target ${itk-module})
  endif()
  set(${itk-module}_INSTALL_RUNTIME_DIR bin)
  set(${itk-module}_INSTALL_LIBRARY_DIR lib)
  set(${itk-module}_INSTALL_ARCHIVE_DIR lib)
  set(${itk-module}_INSTALL_INCLUDE_DIR include/itk-${itk-version})
  set(${itk-module}_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR})
  set(${itk-module}_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR})

  if(NOT ${itk-module}-targets)
    set(${itk-module}-STANDALONE 1)
    set(${itk-module}-targets ${itk-module}-targets)
    set(${itk-module}-targets-install "lib/cmake/${itk-module}-${itk-version}/${itk-module}-targets.cmake")
    set(${itk-module}-targets-build "${${itk-module}_BINARY_DIR}/${itk-module}-targets.cmake")
    file(WRITE "${${itk-module}-targets-build}" "# Generated by CMake, do not edit!")
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${${itk-module}_BINARY_DIR}/bin)
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${${itk-module}_BINARY_DIR}/lib)
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${${itk-module}_BINARY_DIR}/lib)
    if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
      set(CMAKE_INSTALL_PREFIX ${${itk-module}_BINARY_DIR}/root CACHE PATH "" FORCE)
    endif()
  endif()

  if(DEFINED ${itk-module}_LIBRARIES)
    set(itk-module-config-build "${itk-module-config-build}
set(${itk-module}_LIBRARIES \"${${itk-module}_LIBRARIES}\")
")
    set(itk-module-config-install "${itk-module-config-install}
set(${itk-module}_LIBRARIES \"${${itk-module}_LIBRARIES}\")
")
    set(_trans 0)
  else()
    set(_trans 1)
  endif()

  foreach(dep IN LISTS ITK_MODULE_${itk-module}_DEPENDS)
    find_package(${dep} ${itk-version} REQUIRED)
    if(${dep}_INCLUDE_DIRS)
      include_directories(${${dep}_INCLUDE_DIRS})
    endif()
    if(${dep}_LIBRARY_DIRS)
      link_directories(${${dep}_LIBRARY_DIRS})
    endif()
    set(itk-module-config-build "${itk-module-config-build}
set(${dep}_DIR \"${${dep}_DIR}\")
find_package(${dep} ${itk-version} REQUIRED)
list(APPEND ${itk-module}_INCLUDE_DIRS \${${dep}_INCLUDE_DIRS})
list(APPEND ${itk-module}_LIBRARY_DIRS \${${dep}_LIBRARY_DIRS})
")
    set(itk-module-config-install "${itk-module-config-install}
find_package(${dep} ${itk-version} REQUIRED)
list(APPEND ${itk-module}_INCLUDE_DIRS \${${dep}_INCLUDE_DIRS})
list(APPEND ${itk-module}_LIBRARY_DIRS \${${dep}_LIBRARY_DIRS})
")
    if(_trans)
      list(APPEND ${itk-module}_LIBRARIES ${${dep}_LIBRARIES})
      set(itk-module-config-build "${itk-module-config-build}
list(APPEND ${itk-module}_LIBRARIES \${${dep}_LIBRARIES})
")
      set(itk-module-config-install "${itk-module-config-install}
list(APPEND ${itk-module}_LIBRARIES \${${dep}_LIBRARIES})
")
    endif()
  endforeach()

  if(EXISTS ${${itk-module}_SOURCE_DIR}/include)
    list(APPEND ${itk-module}_INCLUDE_DIRS ${${itk-module}_SOURCE_DIR}/include)
    install(DIRECTORY include/ DESTINATION ${${itk-module}_INSTALL_INCLUDE_DIR})
    set(itk-module-config-install "${itk-module-config-install}
list(APPEND ${itk-module}_INCLUDE_DIRS \"\${_prefix}/include/itk-${itk-version}\")
")
  endif()

  if(${itk-module}_INCLUDE_DIRS)
    include_directories(${${itk-module}_INCLUDE_DIRS})
    set(itk-module-config-build "${itk-module-config-build}
list(APPEND ${itk-module}_INCLUDE_DIRS \"${${itk-module}_INCLUDE_DIRS}\")
")
  endif()

  if(${itk-module}_LIBRARIES)
    list(REMOVE_DUPLICATES ${itk-module}_LIBRARIES)
  endif()
  set(itk-module-config-build "${itk-module-config-build}
if(${itk-module}_LIBRARIES)
  list(REMOVE_DUPLICATES ${itk-module}_LIBRARIES)
endif()
")
  set(itk-module-config-install "${itk-module-config-install}
if(${itk-module}_LIBRARIES)
  list(REMOVE_DUPLICATES ${itk-module}_LIBRARIES)
endif()
")

  set(itk-module-export-targets 0)
  if(EXISTS ${${itk-module}_SOURCE_DIR}/src/CMakeLists.txt AND NOT itk-module-no-src)
    set(itk-module-export-targets 1)
    add_subdirectory(src)
    set(itk-module-config-build "${itk-module-config-build}# Import module targets
if(NOT TARGET ${${itk-module}-target})
  include(\"${${itk-module}-targets-build}\")
endif()
")
    set(itk-module-config-install "${itk-module-config-install}# Import module targets
if(NOT TARGET ${${itk-module}-target})
  include(\"\${_prefix}/${${itk-module}-targets-install}\")
endif()
")
  endif()

  configure_file(${_itk_base_dir}/itk-module-config-build.cmake.in ${itk-module}Config.cmake @ONLY)
  configure_file(${_itk_base_dir}/itk-module-config-install.cmake.in CMakeFiles/${itk-module}Config.cmake @ONLY)
  configure_file(${_itk_base_dir}/itk-module-config-version.cmake.in ${itk-module}Config-version.cmake @ONLY)
  install(FILES
    ${${itk-module}_BINARY_DIR}/CMakeFiles/${itk-module}Config.cmake
    ${${itk-module}_BINARY_DIR}/${itk-module}-Config-version.cmake
    DESTINATION lib/cmake/${itk-module}-${itk-version}
    )
  if(${itk-module}-STANDALONE AND itk-module-export-targets)
    install(EXPORT ${${itk-module}-targets} DESTINATION lib/cmake/${itk-module}-${itk-version})
  endif()
endmacro()

macro(itk_module_test)
  include(../itk-module.cmake) # Load module meta-data
  set(itk-version ${ITK_VERSION})
  foreach(dep IN LISTS ITK_MODULE_${itk-module-test}_DEPENDS)
    find_package(${dep} ${itk-version} REQUIRED)
    if(${dep}_INCLUDE_DIRS)
      include_directories(${${dep}_INCLUDE_DIRS})
    endif()
    if(${dep}_LIBRARY_DIRS)
      link_directories(${${dep}_LIBRARY_DIRS})
    endif()
  endforeach()
endmacro()

macro(itk_module_target_name _name)
  set_property(TARGET ${_name} PROPERTY VERSION 1)
  set_property(TARGET ${_name} PROPERTY OUTPUT_NAME ${_name}-${itk-version})
endmacro()

macro(itk_module_target_export _name)
  export(TARGETS ${_name} APPEND FILE ${${itk-module}-targets-build})
endmacro()

macro(itk_module_target_install _name)
  install(TARGETS ${_name}
    EXPORT  ${${itk-module}-targets}
    RUNTIME DESTINATION ${${itk-module}_INSTALL_RUNTIME_DIR}
    LIBRARY DESTINATION ${${itk-module}_INSTALL_ARCHIVE_DIR}
    ARCHIVE DESTINATION ${${itk-module}_INSTALL_LIBRARY_DIR}
    )
endmacro()

macro(itk_module_target _name)
  itk_module_target_name(${_name})
  itk_module_target_export(${_name})
  itk_module_target_install(${_name})
endmacro()
