<?xml version="1.0" encoding="UTF-8"?>

<!--**
**
** FixedLackOfEncapsulationInSpatialObjectPointClasses.xml
**
**
**-->
<Change>
    <!--**
    ** Title for the online migration page
    **-->
    <Title>
      Fixed Lack Of Encapsulation In Spatial Object Point Classes
    </Title>

    <!--**
    ** The author of the change
    **-->
    <Author>
      Luis Ibanez
    </Author>

    <!--**
    ** Date of creation for the XML document
    **-->
    <Date>
      2010-12-26
    </Date>

    <!--**
    ** Plain text description of the change
    ** Extracted from git commit messages
    **-->
    <Description>
      Fixed violations of OOP design in the family of SpatialObjectPoint classes.
      In particular the lack of encapsulation, and the exposure of member variables
      as protected instead of private. A flawed polymorphism is still in use in the
      SetPoints method. This should be fixed in a separate commit.

      The major change is that member variables were moved from the "protected"
      section to the "private" section. The operator=() were also fixed to take
      advantage of polymorphism and reuse of the implementation created in parent
      classes. This eliminated the need for breaking encapsulation of the member
      variables and made possible to move them to the private section.
    </Description>

    <!--**
    ** Sample code snippets
    ** Extracted from git diff of changed files in Examples and Testing
    **-->
    <SampleCode>
      Derived classes must now use the Set()/Get() methods in order to get
      access to the member variables of parent classes.
      <Old>
        m_Id = 0; // in a derived class
      </Old>

      <New>
        this->SetID(0); // in a derivaed class
      </New>

    </SampleCode>

    <!--**
    ** The change-ids for all commits in the topic branch
    **-->
    <Gerrit-ChangeId>
      I602151deaff2a1726fadde56414313cf9c9b57aa
    </Gerrit-ChangeId>

    <!--**
    ** List of all changed files from the topic branch
    **-->
    <FileList>
      Code/SpatialObject/itkContourSpatialObjectPoint.h
      Code/SpatialObject/itkContourSpatialObjectPoint.txx
      Code/SpatialObject/itkDTITubeSpatialObjectPoint.txx
      Code/SpatialObject/itkLineSpatialObjectPoint.h
      Code/SpatialObject/itkLineSpatialObjectPoint.txx
      Code/SpatialObject/itkSpatialObjectPoint.h
      Code/SpatialObject/itkSpatialObjectPoint.txx
      Code/SpatialObject/itkSurfaceSpatialObjectPoint.h
      Code/SpatialObject/itkSurfaceSpatialObjectPoint.txx
      Code/SpatialObject/itkTubeSpatialObject.h
      Code/SpatialObject/itkTubeSpatialObject.txx
      Code/SpatialObject/itkTubeSpatialObjectPoint.h
      Code/SpatialObject/itkTubeSpatialObjectPoint.txx
      Code/SpatialObject/itkVesselTubeSpatialObjectPoint.h
      Code/SpatialObject/itkVesselTubeSpatialObjectPoint.txx
      Testing/Code/IO/itkReadWriteSpatialObjectTest.cxx
      Utilities/MetaIO/metaObject.cxx
      Utilities/MetaIO/metaTube.cxx
    </FileList>

    <!--**
    ** If the migration can be accomplished by a simple string
    ** substitution, then use the following construct to define
    ** the substitution rule.
    **
    ** <MigrationFix-Automatic>
    **   <Old>
    **     MipsleledName
    **   </Old>
    **   <New>
    **     MisspelledName
    **   </New>
    ** </MigrationFix-Automatic>
    **-->

    <!--**
    ** If the migration can NOT be accomplished by a simple string
    ** substitution, but potential problem spots can be identified,
    ** use the following construct to define a migration flag rule.
    **
    ** <MigrationFix-Manual>
    **   OldFunctionName
    ** </MigrationFix-Manual>
    **-->

</Change>
