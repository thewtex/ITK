/*=========================================================================
 *
 *  Copyright Insight Software Consortium
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0.txt
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *=========================================================================*/
/*=========================================================================
 *
 *  Portions of this file are subject to the VTK Toolkit Version 3 copyright.
 *
 *  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
 *
 *  For complete copyright, license and disclaimer of warranty information
 *  please refer to the NOTICE file at the top of the ITK source tree.
 *
 *=========================================================================*/
package InsightToolkit;

import java.util.StringTokenizer;

public class itkbase
{
  private static String buildDir = "@ITK_JAVA_BUILD_DIR@";
  private static String installDir = "@ITK_JAVA_INSTALL_DIR@";
  private static String libDir = "/InsightToolkit.jar must be in CLASSPATH";

  static
    {
    // Detect whether we are in the build or install tree.
    String sep = System.getProperty("path.separator");
    String classpath = System.getProperty("java.class.path");
    StringTokenizer tokenizer = new StringTokenizer(classpath, sep);
    while(tokenizer.hasMoreTokens())
      {
      String dir = tokenizer.nextToken();
      if(dir.endsWith("InsightToolkit.jar") &&
         (new java.io.File(dir)).exists())
        {
        int index = dir.lastIndexOf("InsightToolkit.jar");
        String self = dir.substring(0, index);
        if((new java.io.File(self+"itk_build_tree.mark")).exists())
          {
          libDir = buildDir;
          break;
          }
        else
          {
          libDir = dir.substring(0, index-1)+installDir;
          break;
          }
        }
      }

    // Load JavaCWD helper code.
    sep = System.getProperty("file.separator");
    String lib = System.mapLibraryName("SwigRuntimeJava");
    Runtime.getRuntime().load(libDir + sep + lib);
    }

  // Method called by wrapper code to load native libraries.
  public static void LoadLibrary(String name)
    {
    // Change to directory containing libraries so dependents are found.
    String old = JavaCWD.GetCWD();
    JavaCWD.SetCWD(libDir);
    String sep = System.getProperty("file.separator");
    String lib = System.mapLibraryName(name);
    JavaCWD.Load(libDir + sep + lib);
    Runtime.getRuntime().load(libDir + sep + lib);
    JavaCWD.SetCWD(old);
    }
}
